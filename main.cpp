#include <iostream>
#include <stdio.h>
using namespace std;

#include "kernel.h"

void printBigInt(biguint_t B)
{
	for (int i = 0;i < NB_DIGITS;++i)
	{
		printf("%#010x",B[i]);
		if (B[i+1] == 0) break;
		if (i != NB_DIGITS-1) printf(",");
	}
	printf("\n");
}

int main()
{
	// A,B jsou v Montgomeryho reprezentaci, A,B,N v bÃ¡zi W = 2^32
	// N = 215714093118538583256769
	// A = 21799067859837164737
	// B = 104402829964868711809
	// -N^(-1) mod W = 2047647423

	NAF coeff;
	memset(&coeff,0,sizeof(NAF));
	char expand[200] = {1,0,0,1,0,-1,0,0,-1,0,0,-1,0,-1,0,0,-1,0,0,-1,0,1,0,-1,0,-1,0,-1,0,0,1,0,0,0,-1,0,1,0,0,1,0,0,0,1,0,-1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,-1,0,0,1,0,-1,0,-1,0,1,0,1,0,0,0,0,-1,0,0,1,0,-1,0,0,0,0,0,-1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,-1,0,0,0,1,0,0,0,0,1,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,1,0,0,-1,0,-1,0,-1,0,0,0,1,0,0,0,-1,0,-1,0,-1,0,0,0,0,1,0,1,0,0,1,0,0,0,-1,0,0,1,0,-1,0,-1,0,0,1,0,1,0,0,0,-1,0,0,0,0,0,0,0};
	memcpy((void*)coeff.bits,(void*)expand,200);
	coeff.l = 200;
	coeff.w = 2;

	struct h_ExtendedPoint pts = 
	{ 
				 {0x0e6c2ef9,0x9e4d4f27,0x0000299e,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000},
				 {0x47769205,0xdceddf18,0x00002c89,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000},
				 {0},
				 {0}
	};
	
	struct h_Aux ax = 
	{
		 {0x1b8a2ec1,0xe2695510,0x00002dad,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000},
		 {0x529e8c43,0xa73bff30,0x00008909,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000},
		 2047647423
	};


	cudaError_t cudaStatus = computeExtended(ax,&pts,coeff);
    if (cudaStatus != cudaSuccess) {
        fprintf(stderr, "addWithCuda failed!");
        return 1;
    }

    // cudaDeviceReset must be called before exiting in order for profiling and
    // tracing tools such as Nsight and Visual Profiler to show complete traces.
    cudaStatus = cudaDeviceReset();
    if (cudaStatus != cudaSuccess) {
        fprintf(stderr, "cudaDeviceReset failed!");
        return 1;
    }
    
	

	char c;
	cin >> c;
    return 0;
}
